
package conversions;
import java.text.NumberFormat;
import java.util.Scanner;
/**
 *
 * @author Reese T Ebling
 */
public class Conversions {

    static Scanner sc = new Scanner(System.in);
    static boolean usingk;
   
    public static void main(String[] args) {
      int cvtype;
      String choice; 
      double v, r, k;
      NumberFormat nf = NumberFormat.getNumberInstance();
        nf.setMaximumFractionDigits(3);
        nf.setMinimumFractionDigits(3);
      
      System.out.println("Welcome to the conversion calculator.");
      
      System.out.print("Do you want to see degrees Kelvin? (Y/N)");
      choice = sc.nextLine();
      
      
      usingk = choice.toUpperCase().startsWith("Y");
      
      cvtype = getCVType();
      while (cvtype != 0) {
          switch (cvtype) {
              case 1:
                  //mi-to-km
                  v = getValue("Miles");
                  try {
                    r = ConvCalcs.mitoKm(v);
                    System.out.println(nf.format(v) + " miles = " + nf.format(r)
                            + " kilometers");
                  } catch (Exception e) {
                      System.out.println(e.getMessage());
                  }
                  break;
              case 2:
                  v = getValue("Ounces");
                  try {
                      r = ConvCalcs.oztoGr(v);
                      System.out.println(nf.format(v) + " ounces = " + nf.format(r)
                              + " grams.");
                  } catch (Exception e) {
                      System.out.println(e.getMessage());
                  }
                  break;
              case 3:
                  v = getValue("Fahrenheit");
                  try {
                      r = ConvCalcs.ftoC(v);
                      k = ConvCalcs.degreesK(v);
                      System.out.print(nf.format(v) + " farenheit = " + nf.format(r)
                              + " celsius.");
                      if (usingk == true) {
                          System.out.println("(Which is also " + nf.format(k) +" Kelvin)");
                      }
                  } catch (Exception e) {
                      System.out.println(e.getMessage());
                  }
                  break;
              case 4:
                  v = getValue("Calsius");
                  try {
                      r = ConvCalcs.ctoF(v);
                      System.out.println(nf.format(v) + " celsius = " + nf.format(r)
                              + " Farenheit.");
                  } catch (Exception e) {
                      System.out.println(e.getMessage());
                  }
                  break;
              case 5:
                  v = getValue("Liters");
                  try {
                      r = ConvCalcs.ltoG(v);
                      System.out.println(nf.format(v) + " Liters = " + nf.format(r)
                              + " Gallons.");
                  } catch (Exception e) {
                      System.out.println(e.getMessage());
                  }
                  break;
              case 6:
                  v = getValue("Meters");
                  try {
                      r = ConvCalcs.mtoFt(v);
                      System.out.println(nf.format(v) + " Meters = " + nf.format(r)
                              + " Feet.");
                  } catch (Exception e) {
                      System.out.println(e.getMessage());
                  }
                  break;
              default:
                  System.out.println("Unknown or undeveloped conversion.");
                  break;
          }
          
          cvtype = getCVType();
      }//end of while
      System.out.println("Thanks for using the calculator");
    }
    

    public static int getCVType() {
        //get conversion type -- must have exception and error catching, preventing crashes
        int cvt;
        System.out.print("1=Mi-to-Km, 2=Oz-to-Gr, 3=F-to-C,"
                + "4=C-to-F, 5=L-to-G, 6=M-to-Ft, 0=Quit: ");
        cvt = sc.nextInt();
        return cvt;
    }
    

    public static double getValue(String desc)   {
        // must handle errors and data validation
        double v;
       
        do {
            try {
                System.out.print("Error: " + desc + " has to be between 1 and 6, or 0. "
                        + "Please try again: ");
                v = sc.nextDouble();
                if (v < 0) {
                System.out.println("Illegal Value: cannot be negative. Please "
                        + "try again: ");
                }
            } catch (Exception e) {
                System.out.println("Illegal input: non-negative integers only."
                        + " Please try again: "); 
                sc.nextLine();
                v = -1;
            }
        } while (v < 6);
        return v;
    }   
}
